{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["nums","ops","ids","7","8","9","4","5","6","1","2","3","0","App","state","lastPressed","undefined","calc","operation","handleClick","e","innerText","target","setState","evaluated","eval","splitted","split","last","slice","includes","lastNumberIdx","reverse","findIndex","char","length","this","currentNumber","className","id","onClick","map","num","key","op","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kxCAGMA,KAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnCC,IAAM,CAAC,IAAK,IAAK,IAAK,KACtBC,IAAM,CACVC,EAAG,QACHC,EAAG,QACHC,EAAG,OACHC,EAAG,OACHC,EAAG,OACHC,EAAG,MACHC,EAAG,MACHC,EAAG,MACHC,EAAG,QACHC,EAAG,OACH,IAAK,SACL,IAAK,WACL,IAAK,WACL,IAAK,OAGDC,I,szBACJC,MAAQ,CACNC,iBAAaC,EACbC,KAAM,IACNC,eAAWF,G,MAGbG,YAAc,SAACC,GAAO,IAAD,YACW,MAAKN,MAA3BG,KADW,YACXA,KAAMF,YADK,YACLA,YACNM,UAAcD,EAAEE,OAAhBD,UAER,OAAQA,WACN,IAAK,KACH,MAAKE,SAAS,CACZN,KAAM,MAER,MAGF,IAAK,IACH,IAAMO,UAAYC,KAAKR,MACvB,MAAKM,SAAS,CACZN,KAAMO,YAER,MAGF,IAAK,IACH,IAAME,SAAWT,KAAKU,MAAM,cACtBC,KAAOF,SAASG,OAAO,GAAG,GAE3BD,KAAKE,SAAS,MACjB,MAAKP,SAAS,CACZN,KAAMA,KAAO,MAIjB,MAGF,QACE,IAAIG,QAAIJ,EAER,GAAIf,IAAI6B,SAAST,WACf,GAAIpB,IAAI6B,SAASf,cAA8B,MAAdM,UAAmB,CAElD,IAAMU,cAAgBd,KACnBU,MAAM,IACNK,UACAC,WAAU,SAACC,GAAD,MAAmB,MAATA,GAAgBlC,KAAK8B,UAAUI,MACtDd,GAAIH,KAAKY,MAAM,EAAGZ,KAAKkB,OAASJ,eAA5B,WAAiDV,UAAjD,UAEJD,GAAC,UAAMH,KAAN,YAAcI,UAAd,UAGHD,GAAa,MAATH,KAAeI,UAAYJ,KAAOI,UAGxC,MAAKE,SAAS,CACZN,KAAMG,KAKZ,MAAKG,SAAS,CACZR,YAAaM,a,0OAIP,IAAD,SACyBe,KAAKtB,MAAdG,GADhB,EACCoB,cADD,EACgBpB,MAEvB,OACE,kEAAKqB,UAAU,cACb,kEAAKC,GAAG,UAAUD,UAAU,WACzBrB,GAGH,kEAAKqB,UAAU,kBACb,qEACEA,UAAU,sBACVE,QAASJ,KAAKjB,YACdoB,GAAG,SAHL,MAQCvC,KAAKyC,KAAI,SAACC,GAAD,OACR,qEACEJ,UAAS,oBAAuB,IAARI,GAAa,SACrCC,IAAKD,EACLF,QAAS,EAAKrB,YACdoB,GAAIrC,IAAIwC,IAEPA,MAIL,qEACEJ,UAAU,aACVE,QAASJ,KAAKjB,YACdoB,GAAG,WAHL,MAQF,kEAAKD,UAAU,iBACZrC,IAAIwC,KAAI,SAACG,GAAD,OACP,qEACEN,UAAU,SACVK,IAAKC,EACLJ,QAAS,EAAKrB,YACdoB,GAAIrC,IAAI0C,IAEPA,MAIL,qEAAQN,UAAU,SAASE,QAASJ,KAAKjB,YAAaoB,GAAG,UAAzD,W,KAtHQM,6CAAMC,WA8HTjC,2B,2JCxIKkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACzC,EAAA,EAAD,OAEF0C,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.84c93153.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nconst nums = [7, 8, 9, 4, 5, 6, 1, 2, 3, 0];\nconst ops = [\"/\", \"*\", \"-\", \"+\"];\nconst ids = {\n  7: \"seven\",\n  8: \"eight\",\n  9: \"nine\",\n  4: \"four\",\n  5: \"five\",\n  6: \"six\",\n  1: \"one\",\n  2: \"two\",\n  3: \"three\",\n  0: \"zero\",\n  \"/\": \"divide\",\n  \"*\": \"multiply\",\n  \"-\": \"subtract\",\n  \"+\": \"add\",\n};\n\nclass App extends React.Component {\n  state = {\n    lastPressed: undefined,\n    calc: \"0\",\n    operation: undefined,\n  };\n\n  handleClick = (e) => {\n    const { calc, lastPressed } = this.state;\n    const { innerText } = e.target;\n\n    switch (innerText) {\n      case \"AC\": {\n        this.setState({\n          calc: \"0\",\n        });\n        break;\n      }\n\n      case \"=\": {\n        const evaluated = eval(calc);\n        this.setState({\n          calc: evaluated,\n        });\n        break;\n      }\n\n      case \".\": {\n        const splitted = calc.split(/[\\+\\-\\*\\/]/);\n        const last = splitted.slice(-1)[0];\n\n        if (!last.includes(\".\")) {\n          this.setState({\n            calc: calc + \".\",\n          });\n        }\n\n        break;\n      }\n\n      default: {\n        let e = undefined;\n        // check for other op\n        if (ops.includes(innerText)) {\n          if (ops.includes(lastPressed) && innerText !== \"-\") {\n            // oh boii...\n            const lastNumberIdx = calc\n              .split(\"\")\n              .reverse()\n              .findIndex((char) => char !== \" \" && nums.includes(+char));\n            e = calc.slice(0, calc.length - lastNumberIdx) + ` ${innerText} `;\n          } else {\n            e = `${calc} ${innerText} `;\n          }\n        } else {\n          e = calc === \"0\" ? innerText : calc + innerText;\n        }\n\n        this.setState({\n          calc: e,\n        });\n      }\n    }\n\n    this.setState({\n      lastPressed: innerText,\n    });\n  };\n\n  render() {\n    const { currentNumber, calc } = this.state;\n\n    return (\n      <div className=\"calculator\">\n        <div id=\"display\" className=\"display\">\n          {calc}\n        </div>\n\n        <div className=\"nums-container\">\n          <button\n            className=\"big-h light-grey ac\"\n            onClick={this.handleClick}\n            id=\"clear\"\n          >\n            AC\n          </button>\n\n          {nums.map((num) => (\n            <button\n              className={`dark-grey ${num === 0 && \"big-h\"}`}\n              key={num}\n              onClick={this.handleClick}\n              id={ids[num]}\n            >\n              {num}\n            </button>\n          ))}\n\n          <button\n            className=\"light-grey\"\n            onClick={this.handleClick}\n            id=\"decimal\"\n          >\n            .\n          </button>\n        </div>\n        <div className=\"ops-container\">\n          {ops.map((op) => (\n            <button\n              className=\"orange\"\n              key={op}\n              onClick={this.handleClick}\n              id={ids[op]}\n            >\n              {op}\n            </button>\n          ))}\n\n          <button className=\"orange\" onClick={this.handleClick} id=\"equals\">\n            =\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App.js\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}